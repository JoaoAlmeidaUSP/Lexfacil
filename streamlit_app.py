import streamlit as st
import tempfile
import os
import PyPDF2
import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold
import time
from datetime import datetime

# Configura√ß√£o da API
GOOGLE_API_KEY = "AIzaSyAi-EZdS0Jners99DuB_5DkROiK16ghPnM"  # Replace with your actual API key

if not GOOGLE_API_KEY or GOOGLE_API_KEY == "YOUR_ACTUAL_API_KEY_HERE": 
    st.error("‚ö†Ô∏è ATEN√á√ÉO: A CHAVE API DO GEMINI N√ÉO FOI DEFINIDA CORRETAMENTE NO C√ìDIGO!")
    st.error("Por favor, substitua 'YOUR_ACTUAL_API_KEY_HERE' pela sua chave API real na vari√°vel GOOGLE_API_KEY no c√≥digo-fonte.")
    st.warning("Lembre-se: N√£o compartilhe este c√≥digo com sua chave API real em reposit√≥rios p√∫blicos.")
    st.stop()

try:
    genai.configure(api_key=GOOGLE_API_KEY)
    safety_settings = {
        HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
        HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
        HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
        HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
    }
    model = genai.GenerativeModel(
        model_name='gemini-1.5-flash-latest',
        safety_settings=safety_settings
    )
except Exception as e:
    st.error(f"‚ùå Falha ao configurar a API do Gemini: {str(e)}")
    st.stop()

# Inicializa√ß√£o do session state
if 'chat_messages' not in st.session_state:
    st.session_state.chat_messages = []
if 'texto_lei' not in st.session_state:
    st.session_state.texto_lei = ""
if 'nome_documento' not in st.session_state:
    st.session_state.nome_documento = ""
if 'analise_realizada' not in st.session_state:
    st.session_state.analise_realizada = False
if 'resumo_realizado' not in st.session_state:
    st.session_state.resumo_realizado = False
if 'contexto_conversa' not in st.session_state:
    st.session_state.contexto_conversa = ""
if 'persona_usuario' not in st.session_state:
    st.session_state.persona_usuario = "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Cidad√£o"
if 'casos_praticos' not in st.session_state:
    st.session_state.casos_praticos = []
if 'prazos_extraidos' not in st.session_state:
    st.session_state.prazos_extraidos = []

# --- Helper Functions ---
def extrair_texto_pdf(caminho_pdf):
    texto = ""
    try:
        with open(caminho_pdf, 'rb') as arquivo:
            leitor = PyPDF2.PdfReader(arquivo)
            if not leitor.pages:
                return ""
            for pagina_num, pagina in enumerate(leitor.pages):
                texto_pagina = pagina.extract_text()
                if texto_pagina:
                    texto += texto_pagina
        return texto.strip()
    except Exception as e:
        st.error(f"Erro ao processar o PDF: {str(e)}")
        return ""

def call_gemini_api(prompt_text, task_name="tarefa"):
    try:
        response = model.generate_content(prompt_text)
        if not response.candidates:
            if response.prompt_feedback and response.prompt_feedback.block_reason:
                block_reason_message = response.prompt_feedback.block_reason.name
                return f"Conte√∫do bloqueado: {block_reason_message}"
            else:
                return "Nenhum conte√∫do gerado."
        return response.text
    except Exception as e:
        st.error(f"‚ùå Erro durante a {task_name} com a API Gemini: {str(e)}")
        return f"Erro na API: {str(e)}"

def criar_contexto_inicial():
    """Cria o contexto inicial para o agente conversacional"""
    if st.session_state.texto_lei:
        personas = {
            "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Cidad√£o": "Use linguagem ultra-simples, foque no impacto pessoal e familiar, d√™ exemplos do cotidiano",
            "üë®‚Äçüíº Empres√°rio": "Foque em impactos comerciais, custos, prazos de adequa√ß√£o, riscos para neg√≥cios",
            "üë©‚Äç‚öñÔ∏è Advogado": "Pode usar termos t√©cnicos, foque em interpreta√ß√£o jur√≠dica, precedentes, aplica√ß√£o pr√°tica",
            "üèõÔ∏è Servidor P√∫blico": "Foque na aplica√ß√£o da norma, procedimentos, compet√™ncias dos √≥rg√£os"
        }
        
        contexto_persona = personas.get(st.session_state.persona_usuario, personas["üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Cidad√£o"])
        
        contexto = f"""
        DOCUMENTO JUR√çDICO CARREGADO: {st.session_state.nome_documento}
        
        TEXTO DA LEI/NORMA:
        {st.session_state.texto_lei[:15000]}
        
        PERFIL DO USU√ÅRIO: {st.session_state.persona_usuario}
        INSTRU√á√ïES ESPEC√çFICAS: {contexto_persona}
        
        INSTRU√á√ïES PARA O AGENTE:
        Voc√™ √© o LexF√°cil, um assistente jur√≠dico especializado em simplificar textos normativos.
        Sua miss√£o √© ajudar as pessoas a compreenderem leis e regulamentos de forma clara e acess√≠vel.
        
        DIRETRIZES:
        1. Adapte sua linguagem ao perfil do usu√°rio selecionado
        2. Quando mencionar artigos ou se√ß√µes, explique seu significado pr√°tico
        3. Use exemplos relevantes ao perfil do usu√°rio
        4. Se um termo jur√≠dico for necess√°rio, explique conforme o n√≠vel do usu√°rio
        5. Seja objetivo mas amig√°vel
        6. Foque sempre no documento carregado pelo usu√°rio
        7. Se n√£o souber algo espec√≠fico do documento, seja honesto
        8. Sugira funcionalidades √∫teis (casos pr√°ticos, an√°lise de prazos, etc.)
        
        Responda sempre baseado no documento carregado acima.
        """
        return contexto
    return ""

def processar_pergunta_chat(pergunta):
    """Processa uma pergunta no chat considerando o contexto da lei"""
    contexto_base = criar_contexto_inicial()
    
    # Hist√≥rico das √∫ltimas 3 mensagens para contexto
    historico_recente = ""
    if len(st.session_state.chat_messages) > 0:
        ultimas_msgs = st.session_state.chat_messages[-6:]  # √öltimas 3 trocas (user + assistant)
        for msg in ultimas_msgs:
            papel = "USU√ÅRIO" if msg["role"] == "user" else "ASSISTENTE"
            historico_recente += f"{papel}: {msg['content']}\n"
    
    prompt = f"""
    {contexto_base}
    
    HIST√ìRICO DA CONVERSA:
    {historico_recente}
    
    PERGUNTA ATUAL DO USU√ÅRIO:
    {pergunta}
    
    Responda de forma clara, pr√°tica e acess√≠vel, sempre baseado no documento jur√≠dico carregado.
    """
    
    return call_gemini_api(prompt, "resposta do chat")

def analisar_legibilidade_gemini(texto):
    prompt = f"""
    Analise a legibilidade deste texto jur√≠dico (em portugu√™s) considerando os seguintes crit√©rios.
    Para cada crit√©rio, forne√ßa uma avalia√ß√£o e, se aplic√°vel, sugest√µes de melhoria.

    1.  **Complexidade Lingu√≠stica Geral:**
        *   Avalia√ß√£o (escala de 1-F√°cil a 10-Muito Dif√≠cil):
        *   Justificativa:
    2.  **Densidade Conceitual:**
        *   Avalia√ß√£o (Baixa, M√©dia, Alta):
        *   Exemplos de conceitos densos (se houver):
    3.  **Uso de Termos T√©cnicos (Jarg√£o Jur√≠dico):**
        *   Avalia√ß√£o (Moderado, Frequente, Excessivo):
        *   Exemplos de termos t√©cnicos chave:
        *   Sugest√µes para simplificar ou explicar termos:
    4.  **Estrutura das Frases:**
        *   Avalia√ß√£o (Comprimento m√©dio, Clareza, Uso de voz passiva/ativa):
        *   Exemplos de frases complexas (se houver):
        *   Sugest√µes para melhorar a clareza das frases:
    5.  **Coer√™ncia e Coes√£o:**
        *   Avalia√ß√£o (Como as ideias se conectam, clareza do fluxo l√≥gico):
    6.  **P√∫blico-Alvo Ideal:**
        *   Para quem este texto √© mais adequado em sua forma atual?
    7.  **Recomenda√ß√µes Gerais para Simplifica√ß√£o:**
        *   Liste 3-5 a√ß√µes concretas para tornar o texto mais acess√≠vel a um p√∫blico leigo.

    Formato de Resposta: Utilize estritamente MARKDOWN, com t√≠tulos (usando ## ou ###) e bullet points (usando * ou -).

    Texto para An√°lise:
    ---
    {texto[:18000]}
    ---
    """
    return call_gemini_api(prompt, "An√°lise de Legibilidade")

def gerar_resumo_gemini(texto):
    """Gera um resumo simplificado da lei"""
    prompt = f"""
    Voc√™ √© um assistente especializado em simplificar textos jur√≠dicos para o p√∫blico leigo.
    Sua tarefa √© gerar um resumo conciso e em linguagem acess√≠vel do texto jur√≠dico fornecido.
    O resumo deve:
    1.  Identificar e explicar os pontos principais do texto de forma clara.
    2.  Mencionar artigos, par√°grafos ou se√ß√µes relevantes, explicando seu significado pr√°tico.
    3.  Descrever os efeitos pr√°ticos ou as consequ√™ncias do que est√° estabelecido no texto.
    4.  Evitar jarg√µes jur√≠dicos sempre que poss√≠vel. Se um termo t√©cnico for essencial, explique-o brevemente.
    5.  Ser estruturado de forma l√≥gica e f√°cil de seguir.
    6.  Utilizar formato MARKDOWN para melhor legibilidade (t√≠tulos, bullet points, negrito).

    Texto Jur√≠dico para Resumir:
    ---
    {texto[:18000]}
    ---

    Resumo Acess√≠vel:
    """
    return call_gemini_api(prompt, "Gera√ß√£o de Resumo")

def gerar_casos_praticos(texto):
    """Gera casos pr√°ticos baseados na lei"""
    prompt = f"""
    Com base neste texto jur√≠dico, crie 3 casos pr√°ticos/exemplos reais de como esta lei se aplica no dia a dia.
    
    Para cada caso, forne√ßa:
    1. **Situa√ß√£o**: Descreva um cen√°rio espec√≠fico e realista
    2. **Aplica√ß√£o da Lei**: Como a lei se aplica neste caso
    3. **Consequ√™ncias**: O que acontece na pr√°tica
    4. **Dica Pr√°tica**: Uma orienta√ß√£o √∫til
    
    Casos devem ser:
    - Realistas e espec√≠ficos
    - F√°ceis de entender
    - Relevantes para diferentes perfis de pessoas
    - Escritos em linguagem simples
    
    Use formato MARKDOWN com t√≠tulos e se√ß√µes claras.
    
    Texto da Lei:
    ---
    {texto[:15000]}
    ---
    """
    return call_gemini_api(prompt, "Gera√ß√£o de Casos Pr√°ticos")

def extrair_prazos_importantes(texto):
    """Extrai prazos e datas importantes da lei"""
    prompt = f"""
    Analise este texto jur√≠dico e identifique TODOS os prazos, datas e per√≠odos importantes mencionados.
    
    Para cada prazo encontrado, forne√ßa:
    1. **Prazo**: O per√≠odo espec√≠fico (dias, meses, anos)
    2. **Para que serve**: O que deve ser feito neste prazo
    3. **Quem deve cumprir**: Respons√°vel pela a√ß√£o
    4. **Consequ√™ncia**: O que acontece se n√£o cumprir
    5. **Artigo/Se√ß√£o**: Onde est√° previsto no texto
    
    Organize em ordem de import√¢ncia/urg√™ncia.
    Use formato MARKDOWN com emojis para facilitar visualiza√ß√£o.
    
    Se n√£o encontrar prazos espec√≠ficos, informe que a lei n√£o estabelece prazos determinados.
    
    Texto da Lei:
    ---
    {texto[:15000]}
    ---
    """
    return call_gemini_api(prompt, "Extra√ß√£o de Prazos")

def busca_semantica(texto, consulta):
    """Realiza busca sem√¢ntica no texto da lei"""
    prompt = f"""
    O usu√°rio quer encontrar informa√ß√µes sobre: "{consulta}"
    
    Procure no texto jur√≠dico abaixo todas as informa√ß√µes relacionadas a esta consulta.
    Considere sin√¥nimos, conceitos relacionados e contexto.
    
    Retorne:
    1. **Trechos Relevantes**: Cite os artigos/par√°grafos espec√≠ficos
    2. **Explica√ß√£o Simplificada**: O que significa na pr√°tica
    3. **Palavras-chave Encontradas**: Termos relacionados identificados
    
    Se n√£o encontrar nenhuma informa√ß√£o relacionada, informe claramente.
    
    Consulta do usu√°rio: {consulta}
    
    Texto da Lei:
    ---
    {texto[:15000]}
    ---
    """
    return call_gemini_api(prompt, "Busca Sem√¢ntica")

# --- Interface Streamlit ---
st.set_page_config(page_title="LexF√°cil", layout="wide", initial_sidebar_state="expanded")

# Sidebar para upload e ferramentas
with st.sidebar:
    st.title("üìò LexF√°cil")
    st.markdown("**Seu assistente jur√≠dico inteligente**")
    
    # Seletor de Persona
    st.markdown("### üë§ Seu Perfil")
    personas = {
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Cidad√£o": "Linguagem simples e exemplos do dia a dia",
        "üë®‚Äçüíº Empres√°rio": "Foco em impactos comerciais e neg√≥cios", 
        "üë©‚Äç‚öñÔ∏è Advogado": "An√°lise t√©cnica e jur√≠dica detalhada",
        "üèõÔ∏è Servidor P√∫blico": "Aplica√ß√£o pr√°tica da norma"
    }
    
    persona_escolhida = st.selectbox(
        "Como voc√™ quer que eu te ajude?",
        options=list(personas.keys()),
        index=list(personas.keys()).index(st.session_state.persona_usuario),
        help="Escolha seu perfil para respostas personalizadas"
    )
    
    if persona_escolhida != st.session_state.persona_usuario:
        st.session_state.persona_usuario = persona_escolhida
        st.success(f"‚úÖ Perfil alterado para {persona_escolhida}")
        # Rerun para aplicar mudan√ßas
        time.sleep(1)
        st.rerun()
    
    st.info(personas[st.session_state.persona_usuario])
    
    # Upload de arquivo
    st.markdown("### üìÑ Carregar Documento")
    uploaded_file = st.file_uploader("Envie o PDF da lei ou norma", type=["pdf"])
    
    if uploaded_file:
        if uploaded_file.name != st.session_state.nome_documento:
            # Novo arquivo carregado
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                tmp_file_path = tmp_file.name

            with st.spinner("Processando documento..."):
                texto_extraido = extrair_texto_pdf(tmp_file_path)
                os.unlink(tmp_file_path)
                
                if texto_extraido:
                    st.session_state.texto_lei = texto_extraido
                    st.session_state.nome_documento = uploaded_file.name
                    st.session_state.chat_messages = []  # Limpa chat anterior
                    st.session_state.analise_realizada = False
                    st.session_state.resumo_realizado = False
                    st.success("‚úÖ Documento carregado!")
                    
                    # Mensagem de boas-vindas autom√°tica
                    boas_vindas = f"""Ol√°! Acabei de receber o documento **{uploaded_file.name}**. 

Agora posso ajudar voc√™ a entender este texto jur√≠dico de forma simples e clara. Voc√™ pode:

üîç **Me fazer perguntas** sobre qualquer parte da lei
üìä **Solicitar an√°lise de legibilidade** - para entender o qu√£o complexo √© o texto
üìÑ **Pedir um resumo simplificado** - com os pontos principais explicados

**Como posso ajudar voc√™ hoje?**"""
                    
                    st.session_state.chat_messages.append({
                        "role": "assistant",
                        "content": boas_vindas,
                        "timestamp": datetime.now()
                    })
                    st.rerun()
                else:
                    st.error("‚ùå N√£o foi poss√≠vel extrair texto do PDF")
        
        # Ferramentas r√°pidas
        if st.session_state.texto_lei:
            st.markdown("### üõ†Ô∏è Ferramentas Inteligentes")
            
            # Primeira linha - An√°lises b√°sicas
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üìä An√°lise", use_container_width=True):
                    if not st.session_state.analise_realizada:
                        with st.spinner("Analisando..."):
                            analise = analisar_legibilidade_gemini(st.session_state.texto_lei)
                            st.session_state.chat_messages.append({
                                "role": "user",
                                "content": "Fa√ßa uma an√°lise de legibilidade do documento",
                                "timestamp": datetime.now()
                            })
                            st.session_state.chat_messages.append({
                                "role": "assistant", 
                                "content": f"## üìä An√°lise de Legibilidade\n\n{analise}",
                                "timestamp": datetime.now()
                            })
                            st.session_state.analise_realizada = True
                            st.rerun()
                    else:
                        st.info("An√°lise j√° realizada!")
            
            with col2:
                if st.button("üìÑ Resumo", use_container_width=True):
                    if not st.session_state.resumo_realizado:
                        with st.spinner("Resumindo..."):
                            resumo = gerar_resumo_gemini(st.session_state.texto_lei)
                            st.session_state.chat_messages.append({
                                "role": "user",
                                "content": "Gere um resumo simplificado do documento",
                                "timestamp": datetime.now()
                            })
                            st.session_state.chat_messages.append({
                                "role": "assistant",
                                "content": f"## üìÑ Resumo Simplificado\n\n{resumo}",
                                "timestamp": datetime.now()
                            })
                            st.session_state.resumo_realizado = True
                            st.rerun()
                    else:
                        st.info("Resumo j√° realizado!")
            
            # Segunda linha - Funcionalidades avan√ßadas
            col3, col4 = st.columns(2)
            with col3:
                if st.button("üéØ Casos Pr√°ticos", use_container_width=True):
                    with st.spinner("Criando exemplos..."):
                        casos = gerar_casos_praticos(st.session_state.texto_lei)
                        st.session_state.chat_messages.append({
                            "role": "user",
                            "content": "Gere casos pr√°ticos de aplica√ß√£o da lei",
                            "timestamp": datetime.now()
                        })
                        st.session_state.chat_messages.append({
                            "role": "assistant",
                            "content": f"## üéØ Casos Pr√°ticos\n\n{casos}",
                            "timestamp": datetime.now()
                        })
                        st.session_state.casos_praticos.append(casos)
                        st.rerun()
            
            with col4:
                if st.button("‚è∞ Prazos", use_container_width=True):
                    with st.spinner("Extraindo prazos..."):
                        prazos = extrair_prazos_importantes(st.session_state.texto_lei)
                        st.session_state.chat_messages.append({
                            "role": "user",
                            "content": "Quais s√£o os prazos importantes desta lei?",
                            "timestamp": datetime.now()
                        })
                        st.session_state.chat_messages.append({
                            "role": "assistant",
                            "content": f"## ‚è∞ Prazos Importantes\n\n{prazos}",
                            "timestamp": datetime.now()
                        })
                        st.session_state.prazos_extraidos.append(prazos)
                        st.rerun()
            
            # Busca sem√¢ntica
            st.markdown("### üîç Busca Inteligente")
            busca_query = st.text_input("Buscar por conceito ou tema:", placeholder="Ex: multas, prazos, obriga√ß√µes...")
            if st.button("Buscar", use_container_width=True) and busca_query:
                with st.spinner("Buscando..."):
                    resultado_busca = busca_semantica(st.session_state.texto_lei, busca_query)
                    st.session_state.chat_messages.append({
                        "role": "user",
                        "content": f"Buscar por: {busca_query}",
                        "timestamp": datetime.now()
                    })
                    st.session_state.chat_messages.append({
                        "role": "assistant",
                        "content": f"## üîç Resultados da Busca: '{busca_query}'\n\n{resultado_busca}",
                        "timestamp": datetime.now()
                    })
                    st.rerun()
            
            # Info do documento
            st.markdown("### üìã Documento Atual")
            st.info(f"**{st.session_state.nome_documento}**\n\n{len(st.session_state.texto_lei):,} caracteres\n\nüë§ **Modo:** {st.session_state.persona_usuario}")
    else:
        st.info("Carregue um documento PDF para come√ßar")

# √Årea principal - Chat
st.title("üí¨ Converse sobre sua Lei")

if not st.session_state.texto_lei:
    st.markdown("""
    ### Bem-vindo ao LexF√°cil! üëã
    
    Para come√ßar:
    1. **Carregue um PDF** da lei ou norma na barra lateral
    2. **Converse comigo** sobre o documento de forma natural
    3. **Tire suas d√∫vidas** em linguagem simples
    
    Estou aqui para tornar o juridiqu√™s acess√≠vel! üéØ
    """)
else:
    # Container para o chat
    chat_container = st.container()
    
    # Exibir mensagens do chat
    with chat_container:
        for message in st.session_state.chat_messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
    
    # Input para nova mensagem
    if prompt := st.chat_input("Digite sua pergunta sobre a lei..."):
        # Adicionar mensagem do usu√°rio
        st.session_state.chat_messages.append({
            "role": "user",
            "content": prompt,
            "timestamp": datetime.now()
        })
        
        # Exibir mensagem do usu√°rio
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Gerar e exibir resposta
        with st.chat_message("assistant"):
            with st.spinner("Pensando..."):
                resposta = processar_pergunta_chat(prompt)
                st.markdown(resposta)
                
                # Adicionar resposta ao hist√≥rico
                st.session_state.chat_messages.append({
                    "role": "assistant",
                    "content": resposta,
                    "timestamp": datetime.now()
                })

# Sugest√µes de perguntas personalizadas por persona
if st.session_state.texto_lei and len(st.session_state.chat_messages) <= 1:
    st.markdown("### üí° Perguntas sugeridas para seu perfil:")
    
    sugestoes_por_persona = {
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Cidad√£o": [
            "Como esta lei me afeta no dia a dia?",
            "Quais s√£o meus direitos e deveres?", 
            "O que acontece se eu n√£o cumprir?",
            "Esta lei j√° est√° valendo?",
            "Preciso fazer algo para me adequar?",
            "Tem alguma multa prevista?"
        ],
        "üë®‚Äçüíº Empres√°rio": [
            "Quais os impactos para minha empresa?",
            "Quanto vai custar me adequar?",
            "Quais s√£o os prazos de adequa√ß√£o?",
            "Que documentos preciso providenciar?",
            "Posso ser multado? Qual valor?",
            "Como isso afeta meus funcion√°rios?"
        ],
        "üë©‚Äç‚öñÔ∏è Advogado": [
            "Quais s√£o as principais mudan√ßas?",
            "Como interpretar o artigo X?",
            "H√° conflitos com outras normas?",
            "Quais as san√ß√µes previstas?",
            "Como √© a aplica√ß√£o pr√°tica?",
            "Existem regulamenta√ß√µes complementares?"
        ],
        "üèõÔ∏è Servidor P√∫blico": [
            "Como aplicar esta norma?",
            "Quais s√£o os procedimentos?",
            "Que compet√™ncia tem meu √≥rg√£o?",
            "Como fiscalizar o cumprimento?",
            "Que documentos s√£o necess√°rios?",
            "Como instruir os processos?"
        ]
    }
    
    sugestoes = sugestoes_por_persona.get(st.session_state.persona_usuario, sugestoes_por_persona["üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Cidad√£o"])
    
    cols = st.columns(3)
    for i, sugestao in enumerate(sugestoes):
        with cols[i % 3]:
            if st.button(sugestao, key=f"sug_{i}", use_container_width=True):
                # Simular clique no chat
                st.session_state.chat_messages.append({
                    "role": "user",
                    "content": sugestao,
                    "timestamp": datetime.now()
                })
                
                with st.spinner("Pensando..."):
                    resposta = processar_pergunta_chat(sugestao)
                    st.session_state.chat_messages.append({
                        "role": "assistant",
                        "content": resposta,
                        "timestamp": datetime.now()
                    })
                st.rerun()

# Footer
st.markdown("---")
st.markdown("ü§ñ **LexF√°cil** - Transformando juridiqu√™s em linguagem humana com IA")
